#!/bin/bash

# Print a summary of code completion statistics for each of the available test
# coverage reports.
#
# The documentation for using Hpc is rather sparse. The best documentaion I
# could find was at https://wiki.haskell.org/Haskell_program_coverage. Is there
# any better? (DP 2021-01-21)
#
# In short, you can use `hpc report` to generate a summary of the test coverage
# for a given package. There are two types of files that are needed for the
# summaries.
#   * tix - Coverage information generated by the execution of an instrumented
#     program.
#   * mix - Information about each tick-box inside a module, including style of
#     tick box, and location in the source.
#
# A given report requires one tix file and possibly multiple supporting mix
# files. Mainly by experimentation this script finds all of the filenames ending
# with a `.tix` suffix while requiring that a package version number be included
# in the file path. For example, both of the following tix files might be found.
# However only the one marked with version 0.23.5 works correctly when provided
# as an argument to `hpc report`, while the other file results in an error.
#   * ghc-8.10.7/edm-0.23.5/hpc/vanilla/tix/edm-0.23.5/edm-0.23.5.tix
#   * ghc-8.10.7/edm-0.23.5/hpc/vanilla/tix/edm-test/edm-test.tix

# Use GNU `sed` and `find` if on a macOS system
if [[ $OSTYPE =~ "darwin" ]]; then
    sed='gsed'
    find='gfind'
else
    sed='sed'
    find='find'
fi

# Escape periods in the GHC version number for the purpose of being used as part
# of a regular expression
if [[ -z "$GHC" ]]; then
    >&2 echo 'Error: the GHC environmental variable was not set'
    exit 1
fi
GHC_ver_re=$(echo "$GHC" | $sed "s/\\./\\\\./g")

# Safely find and store the mix paths into an array. Each path is prepended with
# `--hpcdir=` in preparation for being passed in as command line arguments to
# the `hpc report` application. Assumes that $GHC_ver_re has been placed into the
# environment by the CI. See
# https://mywiki.wooledge.org/BashGuide/Arrays#Creating_Arrays-1 for the basic
# pattern for parsing filepaths in the possible presence of spaces or newlines.
# Note that you may need to use the GNU version of `sed` for this command to
# work.
mix_paths=()
while read -r -d ''; do
    mix_paths+=("$REPLY")
done < <(
    $find dist-newstyle -path "*/ghc-$GHC_ver_re/*/hpc/vanilla/mix/*" -print0        \
        | $sed -zr "s|^(.*ghc-$GHC_ver_re/.*/hpc/vanilla/mix/[^/]+).*$|--hpcdir=\1|" \
        | sort -z                                                                    \
        | uniq -z
    )
if [[ ${#mix_paths[@]} == "0" ]]; then
    >&2 echo 'Error: no mix files were found'
fi

# Find and store the tix paths into an array. See the comment for constructing
# the mix paths for the form of this block. Note that you may need to use the
# GNU version of `find` for this command to work.
path_regex=".*/ghc-$GHC_ver_re/.*/hpc/vanilla/tix/[[:alnum:]_-]+[[:digit:]]+[.][[:digit:]]+[.][[:digit:]]+/.*[.]tix"
tix_paths=()
while read -r -d ''; do
    tix_paths+=("$REPLY")
done < <($find dist-newstyle -regextype posix-extended -regex "$path_regex" -print0)
if [[ ${#tix_paths[@]} == "0" ]]; then
    >&2 echo 'Error: no tix files were found'
fi

# Print a per-package summary of code completion statistics for each package
for path in "${tix_paths[@]}"; do
    echo
    echo
    echo '=================================================================='
    echo "tix file: $path"
    echo
    hpc report "${mix_paths[@]}" "$path"
    echo '=================================================================='
done

# Print a banner to make the overall coverage report easy to spot
echo
echo
cat << EOF
==================================================================
   ___                   _ _    ___
  / _ \__ _____ _ _ __ _| | |  / __|_____ _____ _ _ __ _ __ _ ___
 | (_) \ V / -_) '_/ _\` | | | | (__/ _ \ V / -_) '_/ _\` / _\` / -_)
  \___/ \_/\___|_| \__,_|_|_|  \___\___/\_/\___|_| \__,_\__, \___|
                                                        |___/
==================================================================
EOF

# Report the overall test coverage. Creates a temporary directory and file (note
# that Hpc seems to require the filename suffix ends in tix), then combine the
# tix files using `hpc sum`, and then write the coverage summary
tmpdir=$(mktemp -d)
tmpfile="$tmpdir"/package-sum-union.tix
hpc sum --union --output="$tmpfile" "${tix_paths[@]}"
hpc report "${mix_paths[@]}" "$tmpfile" \
    | gsed -r 's/(\s*)(.*top-level declarations used.*)/\1<<< \2 >>>/'
echo '=================================================================='
rm "$tmpfile"
rm -r "$tmpdir"
